{"version":3,"sources":["components/ChatHeader/resources/call-blue-icon.svg","components/ChatHeader/resources/details-pane-blue-icon.svg","components/ChatHeader/resources/video-call-blue-icon.svg","resources/images/avatar.png","components/NavBar/resources/people-grey-icon.svg","components/NavBar/resources/people-blue-icon.svg","components/NavBar/resources/call-grey-icon.svg","components/NavBar/resources/call-blue-icon.svg","components/NavBar/resources/chat-grey-icon.svg","components/NavBar/resources/chat-blue-icon.svg","components/NavBar/resources/group-chat-grey-icon.svg","components/NavBar/resources/group-chat-blue-icon.svg","components/NavBar/resources/more-grey-icon.svg","components/NavBar/resources/more-blue-icon.svg","components/MessageComposer/resources/rounded-plus-grey-icon.svg","components/MessageComposer/resources/send-blue-icon.svg","components/Avatar/index.js","components/UserView/index.js","components/UserList/controller.js","components/UserList/index.js","components/GroupView/index.js","components/GroupList/controller.js","components/GroupList/index.js","components/BadgeCount/index.js","components/ConversationView/index.js","components/ConversationList/controller.js","components/ConversationList/index.js","components/NavBar/index.js","components/ChatHeader/index.js","components/MessageComposer/index.js","components/SenderMessageBubble/index.js","components/ReceiverMessageBubble/index.js","components/ChatWindow/controller.js","components/ChatWindow/index.js","components/ChatView/controller.js","components/ChatView/index.js","components/LaunchCometChat/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Avatar","props","state","src","className","this","avatar","alt","React","Component","defaultProps","UserView","user","onClick","Row","Col","xs","name","CometChatManager","usersRequest","CometChat","UsersRequestBuilder","setLimit","build","timer","Promise","resolve","reject","isUserLogedIn","setInterval","isInitialized","getLoggedinUser","then","logedInUser","clearInterval","error","console","log","fetchNext","callback","addUserListener","UserListener","onUserOnline","onlineUser","onUserOffline","offlineUser","UserList","handleClick","onItemClick","userlist","getUsersList","bind","handleScroll","cometChatManager","attachUserListener","userUpdated","e","Math","round","currentTarget","scrollHeight","scrollTop","clientHeight","map","stateUser","key","uid","splice","setState","isCometChatUserLogedIn","fetchNextContacts","currentLetter","length","substring","toUpperCase","id","style","type","placeholder","aria-label","onScroll","displayUserList","GroupView","group","icon","groupsRequest","GroupsRequestBuilder","addGroupListener","GroupListener","GroupList","grouplist","getGroupsList","attachGroupListener","groupUpdated","stateGroup","fetchNextGroups","guid","displayGroupList","groupList","BadgeCount","count","ConversationView","conversation","conversationType","conversationWith","Date","lastMessage","sentAt","toLocaleTimeString","hour","minute","hour12","unreadMessageCount","data","text","conversationRequest","ConversationsRequestBuilder","ConversationList","item","conversationList","getConversationList","stateConversation","conversationId","fetchNextConversation","displayConversationList","NavBar","activeTab","tab","onItemSelected","onTabChange","peopleBlue","peopleGrey","display","callBlue","callGrey","chatBlue","chatGrey","groupBlue","groupGrey","moreBlue","moreGrey","ChatHeader","videoCallBlue","detailPaneBlue","status","handleSendMessageOnEnter","receiverID","target","value","messageText","receiverType","textMessage","TextMessage","sendMessage","message","document","getElementById","onMessageSent","handleSendMessage","roundedPlus","onKeyDown","sendBlue","SenderMessageBubble","ReceiverMessageBubble","messagesRequest","MessagesRequestBuilder","setUID","setGUID","fetchPrevious","ChatWindow","scrollToBottom","messagesEnd","messageList","loggedInUser","getMessagesList","createRef","attachMessageListener","messageUpdated","prevProps","prevState","inputMessageList","top","stateMessage","fetchPreviousMessages","sender","ref","el","displayMessages","nextProps","ChatView","chatList","messages","undefined","getChatList","chat","stateChat","fetchNextChat","MessageComposer","a","chatView","LaunchCometChat","changeTheme","darktheme","onChange","launch","App","login","Boolean","window","location","hostname","match","appSetting","AppSettingsBuilder","subscribePresenceForAllUsers","setRegion","init","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4398bd54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/call-blue-icon.368958cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/details-pane-blue-icon.64e3a549.svg\";","module.exports = __webpack_public_path__ + \"static/media/video-call-blue-icon.6935c8e5.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.bc560060.png\";","module.exports = __webpack_public_path__ + \"static/media/people-grey-icon.5b3e3d14.svg\";","module.exports = __webpack_public_path__ + \"static/media/people-blue-icon.92d29b43.svg\";","module.exports = __webpack_public_path__ + \"static/media/call-grey-icon.dde8dddb.svg\";","module.exports = __webpack_public_path__ + \"static/media/call-blue-icon.368958cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat-grey-icon.44781a7d.svg\";","module.exports = __webpack_public_path__ + \"static/media/chat-blue-icon.f2b6b911.svg\";","module.exports = __webpack_public_path__ + \"static/media/group-chat-grey-icon.79399539.svg\";","module.exports = __webpack_public_path__ + \"static/media/group-chat-blue-icon.41e7f079.svg\";","module.exports = __webpack_public_path__ + \"static/media/more-grey-icon.a9bb9e7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/more-blue-icon.ac4e5e40.svg\";","module.exports = __webpack_public_path__ + \"static/media/rounded-plus-grey-icon.9e7719df.svg\";","module.exports = __webpack_public_path__ + \"static/media/send-blue-icon.70c145e8.svg\";","import React from \"react\";\nimport \"./style.scss\";\nimport avatar from '../../resources/images/avatar.png';\n\n\nclass Avatar extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      src:\"\"\n  }\n\n  }\n  static getDerivedStateFromProps(props,state){    \n    return props;\n    \n  }\n  \n  render() {\n    return (   \n      <span className=\"cp-avatar-wrapper\">\n      <img className=\"cp-avatar\" src={((this.state.src)? this.state.src:avatar)} alt=\"User\" />    \n      </span>  \n         \n    );\n  }\n}\n\n\n\nexport  default Avatar;\nAvatar.defaultProps = {\n  src:\"\"\n};\n","import React from \"react\";\nimport \"./style.scss\";\nimport Avatar from \"../Avatar\";\nimport { Row,Col } from 'react-bootstrap';\n\n\nclass UserView extends React.Component {\n  constructor(props){\n    super(props);    \n    this.state={\n        user:{},        \n    }\n\n  }\n  static getDerivedStateFromProps(props,state){    \n    return props;\n  }\n  render() {\n    return (\n      <div className=\"cp-userview\" onClick={()=>{ if(this.props.onClick)this.props.onClick(this.state.user)}}>\n          <Row>\n              <Col xs={1}>\n              <Avatar src={this.state.user.avatar}></Avatar>\n              </Col>\n              <Col className=\"cp-user-info\">\n              <div className=\"cp-username\">\n              <div className=\"font-bold\">{this.state.user.name}</div>\n              </div>              \n              {/* <Row className=\"cp-userstatus\"> \n              \n                <span className={\"text-muted \"+ (this.state.user.status===\"online\" ? \"online\":\"offline\")} >{this.state.user.status} </span>\n                </Row>   */}\n              </Col>\n    \n          </Row>\n         \n         \n        \n         \n      </div>\n    );\n  }\n}\n\n\n\nexport  default UserView;\nUserView.defaultProps = {\n  user:{}\n};\n","import { CometChat } from \"@cometchat-pro/chat\"\n\nexport class CometChatManager {\n\n    usersRequest\n    constructor() {\n        this.usersRequest = new CometChat.UsersRequestBuilder().setLimit(12).build();\n    }\n    isUserLogedIn;\n    logedInUser;\n    isCometChatUserLogedIn() {\n        let timerCounter = 10000;\n        let timer = 0;\n        return new Promise((resolve, reject) => {\n            if (timerCounter === timer) reject();\n            this.isUserLogedIn = setInterval(() => {\n                if (CometChat.isInitialized()) {\n                    CometChat.getLoggedinUser().then(user => {\n                        this.logedInUser = user;\n                        clearInterval(this.isUserLogedIn);\n                        resolve(user);\n                    }, error => {\n                        //TODO do something if user is not loggedIn\n                    })\n                } else {\n                    console.log(\"Else\");\n                }\n                timer = + 100;\n            }, 100);\n        });\n    }\n\n    fetchNextContacts() {\n        return this.usersRequest.fetchNext();\n    }\n    attachUserListener(callback) {\n        var listenerID = \"UNIQUE_LISTENER_ID\";\n        CometChat.addUserListener(\n            listenerID,\n            new CometChat.UserListener({\n                onUserOnline: onlineUser => {\n                    /* when someuser/friend comes online, user will be received here */\n                    console.log(\"On User Online:\", { onlineUser });\n                    callback(onlineUser);\n                },\n                onUserOffline: offlineUser => {\n                    /* when someuser/friend went offline, user will be received here */\n                    console.log(\"On User Offline:\", { offlineUser });\n                    callback(offlineUser);\n                }\n            })\n        );\n    }\n}","import React from \"react\";\nimport \"./style.scss\";\nimport UserView from \"../UserView\";\nimport { Row } from 'react-bootstrap';\nimport { CometChatManager } from \"./controller\";\n\nclass UserList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userlist: [],\n      onItemClick: null\n    }\n    this.getUsersList = this.getUsersList.bind(this);\n     this.handleScroll = this.handleScroll.bind(this);\n\n  }\n  componentDidMount() {\n    this.cometChatManager = new CometChatManager();\n    this.getUsersList();\n    this.cometChatManager.attachUserListener(this.userUpdated);\n  }\n  // static getDerivedStateFromProps(props,state){    \n  //   return props;\n  // }\n  handleScroll(e) {\n    const bottom =\n      Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n    if (bottom) this.getUsersList();\n  }\n\n\n  handleClick=(user)=>{\n    this.props.onItemClick(user,'user');\n  }\n\n  \n  userUpdated(user) {\n    let userlist = this.state.userlist;\n    userlist.map((stateUser, key) => {\n      if (stateUser.uid === user.uid) {\n        userlist.splice(key, 1, user);\n\n        return;\n      }\n    });\n    this.setState({ userlist });\n  }\n\n  getUsersList() {\n    this.cometChatManager.isCometChatUserLogedIn().then(\n      user => {\n        this.cometChatManager.fetchNextContacts().then(\n          (userlist) => {\n            this.setState({ userlist: [...this.state.userlist, ...userlist] });\n          },\n          error => {\n            //TODO Handle the erros in conatct List.\n            console.error(\"Handle the erros in conatct List\", error);\n          }\n        );\n      },\n      error => {\n        //TODO Handle the erros in users logedin state.\n        console.error(\"Handle the erros in conatct List\", error);\n      }\n    );\n  }\n\n  displayUserList() {\n    let currentLetter = \"\";\n    if (this.state.userlist.length > 0) {\n      return this.state.userlist.map((user, key) => {\n        if (user.name.substring(0, 1).toUpperCase() !== currentLetter) {\n          currentLetter = user.name.substring(0, 1).toUpperCase();\n          return (\n            <div id={key} onClick={()=>this.handleClick(user)} key={user.uid}>\n              <div className=\"cp-contact-alphabet font-bold\">{currentLetter}</div>\n              <UserView  key={user.uid} user={user}></UserView>\n          <Row className=\"cp-list-seperator\"></Row>\n            </div>\n          );\n        } else {\n          return (\n            <div id={key} onClick={()=>this.handleClick(user)} key={user.uid}>\n             <UserView  key={user.uid} user={user}></UserView>\n              <Row className=\"cp-list-seperator\"></Row>\n           \n            </div>\n          );\n        }\n\n        // return \n        // <div key={user.uid}>\n        //   <UserView onClick={this.state.onItemClick} key={user.uid} user={user}></UserView>\n        //   <Row className=\"cp-list-seperator\"></Row>\n        // </div>\n        // return true;\n      });\n\n    }\n  }\n  render() {\n    return (\n    <div style={{\"height\":\"100%\",\"overflow\":\"hidden\"}}>\n        <p className=\"cp-contact-list-title font-extra-large\">Contacts</p>\n        <p className=\"cp-searchbar\">\n          <input  className=\"font-normal\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"/>\n        </p>\n      <div className=\"cp-userlist\" onScroll={this.handleScroll}>\n        \n        {this.displayUserList()}\n      </div>\n    </div>\n    \n    );\n  }\n}\n\n\n\nexport default UserList;\nUserList.defaultProps = {\n  userlist: {}\n};\n","import React from \"react\";\nimport \"./style.scss\";\nimport Avatar from \"../Avatar\";\nimport { Row,Col } from 'react-bootstrap';\n\n\nclass GroupView extends React.Component {\n  constructor(props){\n    super(props);    \n    this.state={\n        group:{},        \n    }\n\n  }\n  static getDerivedStateFromProps(props,state){    \n    return props;\n  }\n  render() {\n    return (\n      <div className=\"cp-groupview\" onClick={()=>{ if(this.props.onClick)this.props.onClick(this.state.group)}}>\n          <Row>\n              <Col xs={1}>\n              <Avatar src={this.state.group.icon}></Avatar>\n              </Col>\n              <Col className=\"cp-user-info\">\n              <div className=\"cp-username\">\n              <div className=\"font-bold\">{this.state.group.name}</div>\n              </div>              \n              {/* <Row className=\"cp-userstatus\"> \n              \n                <span className={\"text-muted \"+ (this.state.user.status===\"online\" ? \"online\":\"offline\")} >{this.state.user.status} </span>\n                </Row>   */}\n              </Col>\n    \n          </Row>\n         \n         \n        \n         \n      </div>\n    );\n  }\n}\n\n\n\nexport  default GroupView;\nGroupView.defaultProps = {\n  group:{}\n};\n","import { CometChat } from \"@cometchat-pro/chat\"\n\nexport class CometChatManager {\n\n    groupsRequest\n    constructor() {\n        this.groupsRequest = new CometChat.GroupsRequestBuilder().setLimit(20).build();\n    }\n    isUserLogedIn;\n    logedInUser;\n    isCometChatUserLogedIn() {\n        let timerCounter = 10000;\n        let timer = 0;\n        return new Promise((resolve, reject) => {\n            if (timerCounter === timer) reject();\n            this.isUserLogedIn = setInterval(() => {\n                if (CometChat.isInitialized()) {\n                    CometChat.getLoggedinUser().then(user => {\n                        this.logedInUser = user;\n                        clearInterval(this.isUserLogedIn);\n                        resolve(user);\n                    }, error => {\n                        //TODO do something if user is not loggedIn\n                    })\n                } else {\n                    console.log(\"Else\");\n                }\n                timer = + 100;\n            }, 100);\n        });\n    }\n\n    fetchNextGroups() {\n        return this.groupsRequest.fetchNext();\n    }\n    attachGroupListener(callback) {\n        var listenerID = \"UNIQUE_LISTENER_ID\";\n        CometChat.addGroupListener(\n            listenerID,\n            new CometChat.GroupListener({\n                onUserOnline: onlineUser => {\n                    /* when someuser/friend comes online, user will be received here */\n                    console.log(\"On User Online:\", { onlineUser });\n                    callback(onlineUser);\n                },\n                onUserOffline: offlineUser => {\n                    /* when someuser/friend went offline, user will be received here */\n                    console.log(\"On User Offline:\", { offlineUser });\n                    callback(offlineUser);\n                }\n            })\n        );\n    }\n}","import React from \"react\";\nimport \"./style.scss\";\nimport GroupView from \"../GroupView\";\nimport { Row } from 'react-bootstrap';\nimport { CometChatManager } from \"./controller\";\n\n\n\nclass GroupList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grouplist: [],\n      onItemClick: null\n    }\n    this.getGroupsList = this.getGroupsList.bind(this);\n     this.handleScroll = this.handleScroll.bind(this);\n\n  }\n  componentDidMount() {\n    this.cometChatManager = new CometChatManager();\n    this.getGroupsList();\n    this.cometChatManager.attachGroupListener(this.groupUpdated);\n  }\n  // static getDerivedStateFromProps(props,state){    \n  //   return props;\n  // }\n  handleScroll(e) {\n    const bottom =\n      Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n    if (bottom) this.getGroupsList();\n  }\n\n  handleClick=(group)=>{\n    this.props.onItemClick(group,'group');\n  }\n\n  groupUpdated(group) {\n    let grouplist = this.state.grouplist;\n    grouplist.map((stateGroup, key) => {\n      if (stateGroup.uid === group.uid) {\n        grouplist.splice(key, 1, group);\n\n        return;\n      }\n    });\n    this.setState({ grouplist });\n  }\n\n  getGroupsList() {\n    this.cometChatManager.isCometChatUserLogedIn().then(\n      group => {\n        this.cometChatManager.fetchNextGroups().then(\n          (grouplist) => {\n            this.setState({ grouplist: [...this.state.grouplist, ...grouplist] });\n          },\n          error => {\n            //TODO Handle the erros in conatct List.\n            console.error(\"Handle the erros in conatct List\", error);\n          }\n        );\n      },\n      error => {\n        //TODO Handle the erros in users logedin state.\n        console.error(\"Handle the erros in conatct List\", error);\n      }\n    );\n  }\n\n  displayGroupList() {\n    if (this.state.grouplist.length > 0) {\n      return this.state.grouplist.map((group, key) => {\n      \n          return (\n            <div id={key}  onClick={()=>this.handleClick(group)} key={group.guid}>\n             <GroupView  key={group.guid} group={group}></GroupView>\n              <Row className=\"cp-list-seperator\"></Row>\n           \n            </div>\n          );\n\n      });\n\n    }\n  }\n  render() {\n    return (\n    <div style={{\"height\":\"100%\",\"overflow\":\"hidden\"}}>\n        <p className=\"cp-contact-list-title font-extra-large\">Groups</p>\n        <p className=\"cp-searchbar\">\n          <input  className=\"font-normal\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"/>\n        </p>\n      <div className=\"cp-userlist\" onScroll={this.handleScroll}>\n        \n        {this.displayGroupList()}\n      </div>\n    </div>\n    \n    );\n  }\n}\n\n\n\nexport default GroupList;\nGroupList.defaultProps = {\n  groupList: {}\n};\n","import React from \"react\";\nimport \"./style.scss\";\n\n\nclass BadgeCount extends React.Component {\n  constructor(props){\n    super(props)\n    this.state={\n      count:\"\"\n  }\n\n  }\n  static getDerivedStateFromProps(props,state){    \n    return props;\n    \n  }\n  \n  render() {\n    return (   \n      <div className=\"cp-badge-wrapper\">\n      <span className=\"cp-badge\" >{((this.state.count)? this.state.count:\"\")}</span>    \n         </div>\n    );\n  }\n}\n\n\n\nexport  default BadgeCount;\nBadgeCount.defaultProps = {\n  src:\"\"\n};\n","import React from \"react\";\nimport \"./style.scss\";\nimport Avatar from \"../Avatar\";\nimport BadgeCount from \"../BadgeCount\";\nimport { Row,Col } from 'react-bootstrap';\n\n\nclass ConversationView extends React.Component {\n  constructor(props){\n    super(props);    \n    this.state={\n        conversation:{},        \n    }\n\n  }\n  static getDerivedStateFromProps(props,state){    \n    return props;\n  }\n  render() {\n    return (\n      <div className=\"cp-conversationview\" onClick={()=>{ if(this.props.onClick)this.props.onClick(this.state.conversation)}}>\n\n\n{(() => {\n        switch (this.state.conversation.conversationType) {\n          case \"user\":   return ( <Row>\n            <Col className=\"cp-conversation-avatar\" xs={1}>\n            <Avatar src={this.state.conversation.conversationWith.avatar}></Avatar>\n            </Col>\n            <Col className=\"cp-user-info\">\n            <div className=\"cp-username font-bold\">\n            {this.state.conversation.conversationWith.name} </div> \n            <div className=\"cp-time text-muted\"> {new Date(this.state.conversation.lastMessage.sentAt * 1000).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\n            <BadgeCount count={this.state.conversation.unreadMessageCount}></BadgeCount>\n                        \n            <Row className=\"cp-userstatus\"> \n            \n              <span className={\"text-muted \"} >{this.state.conversation.lastMessage.data.text} </span>\n              </Row>  \n            </Col>\n  \n        </Row>);\n          case \"group\": return (<Row>\n            <Col className=\"cp-conversation-avatar\" xs={1}>\n            <Avatar src={this.state.conversation.conversationWith.icon}></Avatar>\n            </Col>\n            <Col className=\"cp-user-info\">\n            <div className=\"cp-username font-bold\">{this.state.conversation.conversationWith.name}</div>\n            <div className=\"cp-time text-muted\"> {new Date(this.state.conversation.lastMessage.sentAt * 1000).toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true })}</div>\n            <BadgeCount count={this.state.conversation.unreadMessageCount}></BadgeCount>\n            <Row className=\"cp-userstatus\"> \n            {this.state.conversation.lastMessage ?   <span className={\"text-muted cp-ellipsis \"} >{this.state.conversation.lastMessage.data.text} </span>:<span className={\"text-muted cp-ellipsis \"} >Tap to start a conversation.</span>\n\n            }\n           \n              </Row>  \n            </Col>\n  \n        </Row>);\n          default:      return null;\n        }\n\n      })()}\n      \n         \n         \n        \n         \n      </div>\n    );\n  }\n}\n\n\n\nexport  default ConversationView;\nConversationView.defaultProps = {\n  conversation:{}\n};\n","import { CometChat } from \"@cometchat-pro/chat\"\n\nexport class CometChatManager {\n\n    conversationRequest\n    constructor() {\n        this.conversationRequest = new CometChat.ConversationsRequestBuilder().setLimit(20).build();\n    }\n    isUserLogedIn;\n    logedInUser;\n    isCometChatUserLogedIn() {\n        let timerCounter = 10000;\n        let timer = 0;\n        return new Promise((resolve, reject) => {\n            if (timerCounter === timer) reject();\n            this.isUserLogedIn = setInterval(() => {\n                if (CometChat.isInitialized()) {\n                    CometChat.getLoggedinUser().then(user => {\n                        this.logedInUser = user;\n                        clearInterval(this.isUserLogedIn);\n                        resolve(user);\n                    }, error => {\n                        //TODO do something if user is not loggedIn\n                    })\n                } else {\n                    console.log(\"Else\");\n                }\n                timer = + 100;\n            }, 100);\n        });\n    }\n\n    fetchNextConversation() {\n        return this.conversationRequest.fetchNext();\n    }\n    \n}","import React from \"react\";\nimport \"./style.scss\";\nimport ConversationView from \"../ConversationView\";\nimport { Row } from 'react-bootstrap';\nimport { CometChatManager } from \"./controller\";\n\n\nclass ConversationList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conversationList: [],\n      onItemClick: null\n    }\n    this.getConversationList = this.getConversationList.bind(this);\n     this.handleScroll = this.handleScroll.bind(this);\n\n  }\n  componentDidMount() {\n    this.cometChatManager = new CometChatManager();\n    this.getConversationList();\n  }\n  // static getDerivedStateFromProps(props,state){    \n  //   return props;\n  // }\n  handleScroll(e) {\n    const bottom =\n      Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n    if (bottom) this.getConversationList();\n  }\n  handleClick=(item,type)=>{\n    this.props.onItemClick(item,type);\n  }\n  conversationUpdated(conversation) {\n    let conversationList = this.state.conversationList;\n    conversationList.map((stateConversation, key) => {\n      if (stateConversation.conversationId === conversation.conversationId) {\n        conversationList.splice(key, 1, conversation);\n\n        return;\n      }\n    });\n    this.setState({ conversationList });\n  }\n\n  getConversationList() {\n    this.cometChatManager.isCometChatUserLogedIn().then(\n      conversation => {\n        this.cometChatManager.fetchNextConversation().then(\n          (conversationList) => {\n            this.setState({ conversationList: [...this.state.conversationList, ...conversationList] });\n          },\n          error => {\n            //TODO Handle the erros in conatct List.\n            console.error(\"Handle the erros in conversation List\", error);\n          }\n        );\n      },\n      error => {\n        //TODO Handle the erros in users logedin state.\n        console.error(\"Handle the erros in conversation List\", error);\n      }\n    );\n  }\n\n  displayConversationList() {\n    if (this.state.conversationList.length > 0) {\n      return this.state.conversationList.map((conversation, key) => {\n          return (\n            <div id={key}  onClick={()=>this.handleClick(conversation.conversationWith,conversation.conversationType)} key={conversation.conversationId}>\n             <ConversationView  key={conversation.conversation} conversation={conversation}></ConversationView>\n              <Row className=\"cp-list-seperator\"></Row>\n           \n            </div>\n          );\n\n      });\n\n    }\n  }\n  render() {\n    return (\n    <div style={{\"height\":\"100%\",\"overflow\":\"hidden\"}}>\n        <p className=\"cp-contact-list-title font-extra-large\">Chats</p>\n        <p className=\"cp-searchbar\">\n          <input  className=\"font-normal\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\"/>\n        </p>\n      <div className=\"cp-userlist\" onScroll={this.handleScroll}>\n        \n        {this.displayConversationList()}\n      </div>\n    </div>\n    \n    );\n  }\n}\n\n\n\nexport default ConversationList;\nConversationList.defaultProps = {\n  conversationList: {}\n};\n","import React from \"react\";\nimport \"./style.scss\";\nimport UserList from \"../UserList\";\nimport GroupList from \"../GroupList\";\nimport ConversationList from \"../ConversationList\";\nimport peopleGrey from \"./resources/people-grey-icon.svg\";\nimport peopleBlue from \"./resources/people-blue-icon.svg\";\nimport callGrey from \"./resources/call-grey-icon.svg\";\nimport callBlue from \"./resources/call-blue-icon.svg\";\nimport chatGrey from \"./resources/chat-grey-icon.svg\";\nimport chatBlue from \"./resources/chat-blue-icon.svg\";\nimport groupGrey from \"./resources/group-chat-grey-icon.svg\";\nimport groupBlue from \"./resources/group-chat-blue-icon.svg\";\nimport moreGrey from \"./resources/more-grey-icon.svg\";\nimport moreBlue from \"./resources/more-blue-icon.svg\";\n\n\n\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      src: \"\",\n      activeTab:'contacts'\n    }\n\n\n  }\n\n  onTabChange(tab){   \n    this.setState({\n      activeTab: tab\n    })\n\n  }\n  static getDerivedStateFromProps(props, state) {\n    return props;\n\n  }\n  \n  \n\n  render() {\n    return (\n      <div className=\"cp-navbar\">\n        \n        <div className=\"cp-navbar\">\n\n        {(() => {\n                switch (this.state.activeTab) {\n                  case \"contacts\":\n                    return <UserList onItemClick={this.props.onItemSelected}></UserList> \n                    case \"calls\":\n                      return \"calls\"\n                      case \"conversations\":\n                      return <ConversationList onItemClick={this.props.onItemSelected}></ConversationList>\n                      case \"groups\":\n                       return <GroupList onItemClick={this.props.onItemSelected}></GroupList> \n                      case \"info\":\n                      return \"info\"\n                \n                  default:\n                    break;\n                }\n            })()}\n         \n       \n        \n        </div>\n        <div className=\"tab\">\n         <button onClick={()=>this.onTabChange('contacts')}><img src={this.state.activeTab===\"contacts\"?peopleBlue:peopleGrey} alt=\"contacts\"/></button>\n          <button style={{display:\"none\"}} onClick={()=>this.onTabChange('calls')}><img src={this.state.activeTab===\"calls\"?callBlue:callGrey} alt=\"calls\"/></button>\n          <button onClick={()=>this.onTabChange('conversations')}><img src={this.state.activeTab===\"conversations\"?chatBlue:chatGrey} alt=\"conversations\"/></button>\n          <button onClick={()=>this.onTabChange('groups')}><img src={this.state.activeTab===\"groups\"?groupBlue:groupGrey} alt=\"groups\"/></button>\n          <button onClick={()=>this.onTabChange('info')}><img src={this.state.activeTab===\"info\"?moreBlue:moreGrey} alt=\"info\"/></button> \n      \n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nexport default NavBar;\nNavBar.defaultProps = {\n  src: \"\"\n};\n\n","import React from \"react\";\nimport \"./style.scss\";\nimport Avatar from \"../Avatar\";\nimport { Row, Col } from 'react-bootstrap';\nimport callBlue from \"./resources/call-blue-icon.svg\";\nimport detailPaneBlue from \"./resources/details-pane-blue-icon.svg\";\nimport videoCallBlue from \"./resources/video-call-blue-icon.svg\";\n\n\n\n\nclass ChatHeader extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conversation: {},\n    }\n\n  }\n  static getDerivedStateFromProps(props, state) {\n    return props;\n  }\n  render() {\n    return (\n      <div className=\"cp-chatheader\" >\n        {\n          this.state.type === \"user\"?<Row>\n          <Col className=\"cp-chat-avatar\" xs={1}>\n            <Avatar src={this.state.item ?this.state.item.avatar:''}></Avatar>\n          </Col>\n          <Col className=\"cp-user-info\">\n            <div className=\"cp-username font-bold\">\n              {(this.state.item ? this.state.item.name : '')} </div>\n            <div className=\"cp-chathead-buttons \">\n              <button ><img src={callBlue} alt=\"call\"/></button>\n              <button ><img src={videoCallBlue} alt=\"video call\"/></button>\n\n              <button ><img src={detailPaneBlue} alt=\"details\"/></button>\n\n            </div>\n\n\n            <Row className=\"cp-userstatus\">\n\n              <span className={\"text-muted \"} > {(this.state.item ? this.state.item.status : '')} </span>\n            </Row>\n          </Col>\n        </Row>:<Row>\n          <Col className=\"cp-chat-avatar\" xs={1}>\n            <Avatar src={this.state.item ?this.state.item.icon:''}></Avatar>\n          </Col>\n          <Col className=\"cp-user-info\">\n            <div className=\"cp-username font-bold\">\n              {(this.state.item ? this.state.item.name : '')} </div>\n            <div className=\"cp-chathead-buttons \">\n              <button ><img src={callBlue} alt=\"call\"/></button>\n              <button ><img src={videoCallBlue} alt=\"video call\" /></button>\n\n              <button ><img src={detailPaneBlue} alt=\"details\"/></button>\n\n            </div>\n\n\n            <Row className=\"cp-userstatus\">\n\n              <span className={\"text-muted \"} > {(this.state.item ? this.state.item.type : '')} </span>\n            </Row>\n          </Col>\n        </Row>\n        }\n\n        \n\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default ChatHeader;\nChatHeader.defaultProps = {\n\n};\n","import React from \"react\";\nimport \"./style.scss\";\nimport roundedPlus from \"./resources/rounded-plus-grey-icon.svg\";\nimport sendBlue from \"./resources/send-blue-icon.svg\";\n\nimport { CometChat } from \"@cometchat-pro/chat\"\n\n\nclass ChatHeader extends React.Component {\n  constructor(props){\n    super(props);    \n    this.state={\n        conversation:{},        \n    }\n    \n\n  }\n  static getDerivedStateFromProps(props,state){    \n    return props;\n  }\n  handleSendMessageOnEnter=(e)=>{\n    if (e.key === 'Enter') {\n      console.log('do validate',e.target.value);\n      var receiverID;\n      if(this.state.type ===\"user\"){\n        receiverID = this.state.item.uid;\n      }else{\n        receiverID = this.state.item.guid;\n      }\n        var messageText = e.target.value;\n        var receiverType = this.state.type;\n        var textMessage = new CometChat.TextMessage(\n          receiverID,\n          messageText,\n          receiverType\n        );\n\n        CometChat.sendMessage(textMessage).then(\n          message => {\n            console.log(\"Message sent successfully:\");\n            document.getElementById(\"messageInput\").value ='';\n            if(this.state.onMessageSent){\n              this.state.onMessageSent(message);\n            }\n          },\n          error => {\n            console.log(\"Message sending failed with error:\", error);\n          }\n        );\n    }\n\n  }\n  handleSendMessage=()=>{\n    let message = document.getElementById(\"messageInput\").value\n    if (message) {\n      var receiverID;\n      if(this.state.type ===\"user\"){\n        receiverID = this.state.item.uid;\n      }else{\n        receiverID = this.state.item.guid;\n      }\n        var messageText = message;\n        var receiverType = this.state.type;\n        var textMessage = new CometChat.TextMessage(\n          receiverID,\n          messageText,\n          receiverType\n        );\n\n        CometChat.sendMessage(textMessage).then(\n          message => {\n            console.log(\"Message sent successfully:\",this.state.onMessageSent);            \n            console.log(this.state.onMessageSent);\n            if(this.state.onMessageSent){\n              this.state.onMessageSent(message);\n            }\n            document.getElementById(\"messageInput\").value ='';\n            \n          },\n          error => {\n            console.log(\"Message sending failed with error:\", error);\n          }\n        );\n    }\n\n  }\n  render() {\n    return (\n      <div className=\"cp-message-composer\" >\n  <div className=\"cp-media-button \">\n            <button ><img src={roundedPlus} alt=\"media\"/></button>\n            </div>\n         <input type=\"text\" placeholder=\"Messages\" id=\"messageInput\" onKeyDown={this.handleSendMessageOnEnter}></input>\n         <div className=\"cp-send-button \">\n         <button onClick={this.handleSendMessage}><img src={sendBlue} alt=\"media\"/></button></div>\n\n      </div>\n    );\n  }\n}\n\n\n\nexport  default ChatHeader;\nChatHeader.defaultProps = {\n \n};\n","import React from \"react\";\nimport \"./style.scss\";\n\n\nclass SenderMessageBubble extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n\n  }\n  static getDerivedStateFromProps(props, state) {\n    return props;\n  }\n  render() {\n    return (\n      <div className=\" cp-sender-message-container\">\n<div className=\" cp-sender-message\" >\n  {this.state.message.text}\n      </div>\n      </div>\n      \n    );\n  }\n}\n\n\n\nexport default SenderMessageBubble;\nSenderMessageBubble.defaultProps = {\n\n};\n","import React from \"react\";\nimport \"./style.scss\";\n\n\nclass ReceiverMessageBubble extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    }\n\n  }\n  static getDerivedStateFromProps(props, state) {\n    return props;\n  }\n  render() {\n    return (\n\n      <div className=\" cp-receiver-message-container\" >\n      <div className=\" cp-receiver-message\" >\n      {this.state.message.text}\n            </div>\n      </div>\n     \n    );\n  }\n}\n\n\n\nexport default ReceiverMessageBubble;\nReceiverMessageBubble.defaultProps = {\n\n};\n","import { CometChat } from \"@cometchat-pro/chat\"\n\nexport class CometChatManager {\n\n    messagesRequest\n    constructor(item,type) {\n        if (type ===\"user\") {\n            const uid = item.uid\n            this.messagesRequest = new CometChat.MessagesRequestBuilder().setLimit(10).setUID(uid).build();\n        }\n        else {\n            const guid = item.guid\n            this.messagesRequest = new CometChat.MessagesRequestBuilder().setLimit(10).setGUID(guid).build();\n        }\n    }\n    isUserLogedIn;\n    logedInUser;\n    isCometChatUserLogedIn() {\n        let timerCounter = 10000;\n        let timer = 0;\n        return new Promise((resolve, reject) => {\n            if (timerCounter === timer) reject();\n            this.isUserLogedIn = setInterval(() => {\n                if (CometChat.isInitialized()) {\n                    CometChat.getLoggedinUser().then(user => {\n                        this.logedInUser = user;\n                        clearInterval(this.isUserLogedIn);\n                        resolve(user);\n                    }, error => {\n                        //TODO do something if user is not loggedIn\n                    })\n                } else {\n                }\n                timer = + 100;\n            }, 100);\n        });\n    }\n\n    fetchPreviousMessages() {\n        return this.messagesRequest.fetchPrevious();\n    }\n    attachMessageListener(callback) {\n        var listenerID = \"UNIQUE_LISTENER_ID\";\n        CometChat.addUserListener(\n            listenerID,\n            new CometChat.UserListener({\n                onUserOnline: onlineUser => {\n                    /* when someuser/friend comes online, user will be received here */\n                    console.log(\"On User Online:\", { onlineUser });\n                    callback(onlineUser);\n                },\n                onUserOffline: offlineUser => {\n                    /* when someuser/friend went offline, user will be received here */\n                    console.log(\"On User Offline:\", { offlineUser });\n                    callback(offlineUser);\n                }\n            })\n        );\n    }\n}","import React from \"react\";\nimport \"./style.scss\";\nimport SenderMessageBubble from \"../SenderMessageBubble\";\nimport ReceiverMessageBubble from \"../ReceiverMessageBubble\"\nimport { CometChatManager } from \"./controller\";\nimport { CometChat } from \"@cometchat-pro/chat\";\n\n\n\nclass ChatWindow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      messageList: [],\n      onItemClick: null,\n      item: [],\n      type: \"\",\n      loggedInUser: {}\n    }\n    this.getMessagesList = this.getMessagesList.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n\n    this.messagesEnd = React.createRef();\n  }\n\n  componentDidMount() {\n    this.scrollToBottom();\n    this.cometChatManager = new CometChatManager(this.props.item, this.props.type);\n    this.getMessagesList();\n    this.cometChatManager.attachMessageListener(this.messageUpdated);\n  }\n  scrollToBottom = (scrollHeight=0) => {\n    if (this.messagesEnd) {\n      this.messagesEnd.scrollTop = (this.messagesEnd.scrollHeight-scrollHeight);\n\n    }\n\n\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n    if(prevState.inputMessageList!==this.state.inputMessageList){\n        this.setState({ messageList: [...this.state.messageList, ...this.state.inputMessageList]},()=>{\n          this.scrollToBottom();\n        });\n\n    }\n\n    if (prevProps.type === 'user') {\n      if (prevState.item.uid !== this.state.item.uid) {\n        this.cometChatManager = new CometChatManager(this.props.item, this.props.type);\n        this.setState({ messageList: [] })\n        this.getMessagesList();\n        this.cometChatManager.attachMessageListener(this.messageUpdated);\n        // this.scrollToBottom();\n      }\n    } else {\n      if (prevProps.item.guid !== this.props.item.guid) {\n        this.cometChatManager = new CometChatManager(this.props.item, this.props.type);\n        this.setState({ messageList: [] })\n        this.getMessagesList();\n        this.cometChatManager.attachMessageListener(this.messageUpdated);\n      }\n    }\n  }\n  static getDerivedStateFromProps(nextProps, prevState) {\n\n    if (nextProps.item !== prevState.item || nextProps.inputMessageList !== prevState.inputMessageList) {\n      console.log('yes we are here and if');\n      return nextProps;\n    } else\n\n      return null;\n\n\n  }\n  handleScroll(e) {\n    const top =Math.round(e.currentTarget.scrollTop) === 0;\n    if (top) {\n      console.log(top)\n      this.getMessagesList();\n    }\n  }\n\n  handleClick = (message) => {\n    this.props.onItemClick(message, 'message');\n  }\n\n  messageUpdated(message) {\n    let messageList = this.state.messageList;\n    messageList.map((stateMessage, key) => {\n      if (stateMessage.uid === message.uid) {\n        messageList.splice(key, 1, message);\n\n        return;\n      }\n    });\n    this.setState({ messageList });\n  }\n  getMessagesList() {\n    this.cometChatManager.isCometChatUserLogedIn().then(\n      user => {\n        this.cometChatManager.fetchPreviousMessages().then(\n          (messageList) => {\n            let scrollHeight=this.messagesEnd.scrollHeight;\n            this.setState({ messageList: [...this.state.messageList, ...messageList], loggedInUser: user });            \n            \n            this.scrollToBottom(scrollHeight);\n          },\n          error => {\n            //TODO Handle the erros in conatct List.\n            console.error(\"Handle the erros in conatct List\", error);\n          }\n        );\n      },\n      error => {\n        //TODO Handle the erros in users logedin state.\n        console.error(\"Handle the erros in conatct List\", error);\n      }\n    );\n  }\n  displayMessages() {\n    if (this.state.messageList.length > 0) {\n      return this.state.messageList.map((message, key) => {\n        return (\n          <div id={key} key={message.id}>\n            {this.state.loggedInUser.uid === message.sender.uid ? <SenderMessageBubble message={message} ></SenderMessageBubble> : <ReceiverMessageBubble message={message}></ReceiverMessageBubble>}\n          </div>\n        );\n\n      });\n\n    }\n\n\n  }\n  render() {\n    return (\n      <div ref={(el) => { this.messagesEnd = el; }} className=\"cp-chat-window\" onScroll={this.handleScroll}>\n        {this.displayMessages()}\n\n      </div>\n    );\n  }\n}\n\n\n\nexport default ChatWindow;\nChatWindow.defaultProps = {\n\n};\n","import { CometChat } from \"@cometchat-pro/chat\"\n\nexport class CometChatManager {\n\n    messagesRequest\n    constructor() {\n        this.messagesRequest = new CometChat.MessagesRequestBuilder().setLimit(30).build();\n    }\n    isUserLogedIn;\n    logedInUser;\n    isCometChatUserLogedIn() {\n        let timerCounter = 10000;\n        let timer = 0;\n        return new Promise((resolve, reject) => {\n            if (timerCounter === timer) reject();\n            this.isUserLogedIn = setInterval(() => {\n                if (CometChat.isInitialized()) {\n                    CometChat.getLoggedinUser().then(user => {\n                        this.logedInUser = user;\n                        clearInterval(this.isUserLogedIn);\n                        resolve(user);\n                    }, error => {\n                        //TODO do something if user is not loggedIn\n                    })\n                } else {\n                    console.log(\"Else\");\n                }\n                timer = + 100;\n            }, 100);\n        });\n    }\n\n    fetchNextChat() {\n        return this.messagesRequest.fetchNext();\n    }\n    \n}","import React from \"react\";\nimport \"./style.scss\";\nimport ChatHeader from \"../ChatHeader\";\nimport MessageComposer from \"../MessageComposer\";\nimport ChatWindow from \"../ChatWindow\";\nimport { CometChatManager } from \"./controller\";\n\n\nclass ChatView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      chatList: [],\n      onItemClick: null,\n      messages:undefined\n    }\n    this.getChatList = this.getChatList.bind(this);\n    this.handleScroll = this.handleScroll.bind(this);\n\n  }\n  componentDidMount() {\n    this.cometChatManager = new CometChatManager();\n    this.getChatList();\n  }\n  static getDerivedStateFromProps(props, state) {\n    return props;\n\n  }\n  handleScroll(e) {\n    const bottom =\n      Math.round(e.currentTarget.scrollHeight - e.currentTarget.scrollTop) === Math.round(e.currentTarget.clientHeight);\n    if (bottom) this.getChatList();\n  }\n  chatUpdated(chat) {\n    let chatList = this.state.chatList;\n    chatList.map((stateChat, key) => {\n      if (stateChat.conversationId === chat.conversationId) {\n        chatList.splice(key, 1, chat);\n\n        return;\n      }\n    });\n    this.setState({ chatList });\n  }\n\n  getChatList() {\n    this.cometChatManager.isCometChatUserLogedIn().then(\n      conversation => {\n        this.cometChatManager.fetchNextChat().then(\n          (chatList) => {\n            this.setState({ chatList: [...this.state.chatList, ...chatList] });\n          },\n          error => {\n            //TODO Handle the erros in conatct List.\n            console.error(\"Handle the erros in conversation List\", error);\n          }\n        );\n      },\n      error => {\n        //TODO Handle the erros in users logedin state.\n        console.error(\"Handle the erros in conversation List\", error);\n      }\n    );\n  }\n\n\n  render() {\n    return (\n      <div className=\"cp-chatview-container\">\n        <ChatHeader item={this.state.item} type={this.state.type}></ChatHeader>\n        <div className=\"cp-chatwindow-conatiner\">\n          <ChatWindow inputMessageList={(this.state.messages !==undefined ? this.state.messages : console.log('yes'))} item={this.state.item} type={this.state.type}></ChatWindow>\n        </div>\n\n        <MessageComposer onMessageSent={async (message) => {         \n          await this.setState({ messages: [message] });\n        }} item={this.state.item} type={this.state.type}></MessageComposer>\n      </div>\n\n    );\n  }\n}\n\n\n\nexport default ChatView;\nChatView.defaultProps = {\n  chatView: {}\n};\n","import React from \"react\";\nimport \"./style.scss\";\nimport NavBar from \"../NavBar\";\nimport ChatView from \"../ChatView\"\n\n\n\nclass LaunchCometChat extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      darktheme: false\n    }\n\n  }\n  static getDerivedStateFromProps(props, state) {\n    return props;\n  }\n\n  changeTheme = (e) => {\n    this.setState({\n      darktheme: !this.state.darktheme\n    })\n  }\n\n\n  render() {\n    return (\n      <div className={\"row cometchat-container \" + (this.state.darktheme ? \"dark\" : \"light\")}>\n        <div className=\"col-lg-3 col-sm-6 col-xs-12 cp-lists-container\" >\n          <div className=\"cp-lists\">\n            <NavBar onItemSelected={(item, type) => {\n              this.setState({ item, type })\n            }}></NavBar>\n          </div>\n        </div>\n        <div className=\"col-lg-9 col-sm-6 col-xs-12 cp-lists-container\">\n          {\n            this.state.item ? <ChatView {...this.state}></ChatView> : <h1 className=\"cp-center-text\">Select a chat to start messaging</h1>\n\n          }\n\n\n          <label className=\"switch\">\n            <input type=\"checkbox\" onChange={this.changeTheme} />\n            <span className=\"slider round\"></span>\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nexport default LaunchCometChat;\nLaunchCometChat.defaultProps = {\n  launch: {}\n};\n","import React from 'react';\nimport './App.css';\nimport LaunchCometChat from './components/LaunchCometChat'\nimport { CometChat } from \"@cometchat-pro/chat\"\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nvar UID = \"nishanttiwari\";\nvar apiKey = \"606028d3c3ecff1b2014886376054ada6621ef97\";\nclass App extends React.Component {\n  \n componentDidMount(){\n  CometChat.login(UID, apiKey).then(\n    user => {\n      console.log(\"Login Successful:\", { user });    \n    },\n    error => {\n      console.log(\"Login failed with exception:\", { error });    \n    }\n  );\n }\n\n\n  render() {\n    return (\n      <Router>      \n        <LaunchCometChat></LaunchCometChat>\n      </Router>\n  \n      \n\n\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport { CometChat } from \"@cometchat-pro/chat\"\n\n\nvar appID = \"9992e0c46c915d\";\nvar region = \"us\";\nvar appSetting = new CometChat.AppSettingsBuilder().subscribePresenceForAllUsers().setRegion(region).build();\nCometChat.init(appID, appSetting).then(\n  () => {\n    console.log(\"Initialization completed successfully\");\n    ReactDOM.render(<BrowserRouter>\n        <App />\n      </BrowserRouter>, document.getElementById('root'));\n  },\n  error => {\n    console.log(\"Initialization failed with error:\", error);\n    // Check the reason for error and take appropriate action.\n  }\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}